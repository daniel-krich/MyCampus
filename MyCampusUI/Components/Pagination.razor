@implements IDisposable

<ul class="pagination pagination-purple p-0">
    <li class="page-item" disabled="@(CurrentPageItem.Item == 1)">
        <a class="page-link" href="@($"{UrlPagination}{CurrentPageItem.Item-1}")">
            <span aria-hidden="true">&laquo;</span>
        </a>
    </li>
    @{
        var pagesBufferedEnd = (CurrentPageItem.Item + PagesBufferRange) > CurrentPagesCountItem.Item ? CurrentPagesCountItem.Item : (CurrentPageItem.Item + PagesBufferRange);
        var pagesBufferedStart = (CurrentPageItem.Item - PagesBufferRange) <= 0 ? 1 : (CurrentPageItem.Item - PagesBufferRange);
    }
    @for(long i = pagesBufferedStart; i <= pagesBufferedEnd; i++)
    {
        var pageLoopIndex = i;
        <li class="@($"page-item" + (pageLoopIndex == CurrentPageItem.Item ? " active": null))">
            <a class="page-link" href="@($"{UrlPagination}{pageLoopIndex}")">
                <span aria-hidden="true">@pageLoopIndex</span>
            </a>
        </li>
    }
    <li class="page-item" disabled="@(CurrentPageItem.Item == CurrentPagesCountItem.Item)">
        <a class="page-link" href="@($"{UrlPagination}{CurrentPageItem.Item+1}")">
            <span aria-hidden="true">&raquo;</span>
        </a>
    </li>
</ul>

@code {
    [Parameter] public int PagesBufferRange { get; set; } = 5;
    [Parameter] public string UrlPagination { get; set; } = "";

    [Parameter] public ItemRef<long> CurrentPageItem { get; set; } = new(1);
    [Parameter] public ItemRef<long> CurrentPagesCountItem { get; set; } = new(1);

    protected override void OnInitialized()
    {
        CurrentPageItem.ItemChanged += OnPaginationChanged;
        CurrentPagesCountItem.ItemChanged += OnPaginationChanged;
    }

    private void OnPaginationChanged(object? sender, EventArgs args)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        CurrentPageItem.ItemChanged -= OnPaginationChanged;
        CurrentPagesCountItem.ItemChanged -= OnPaginationChanged;
    }
}
