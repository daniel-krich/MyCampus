@page "/lecturer/class/{ClassId:guid}/assignment/create"

@implements IDisposable

@inject IAuthenticationStateService authenticationState
@inject ICustomNavigationService navigationService
@inject IAssignmentManagerService assignmentManager
@inject IJSRuntime jsRuntime
@inject IBundleFilesService bundleService
@inject IDbContextFactory<CampusContext> campusContextFactory

<RenderPermission Permission="UserPermissionsEnum.Lecturer" RedirectIfInvalid="true">

    <div class="container mb-4">
        @if (classModel?.Class != null && classModel?.Course != null)
        {
            <h2 class="mb-3">יצירת משימה חדשה ל-@classModel.Class.Name</h2>
            <h4 class="text-muted mb-3">@classModel.Course.Name</h4>

            <div class="row p-3">
                <div class="col-12">
                    <div class="card shadow-sm position-relative">
                        <button class="btn-sm btn-dark fw-bold shadow-sm position-absolute top-0 start-0 translate-middle" @onclick="@(() => navigationService.NavigatePrevious())">
                            חזור <span class="oi oi-arrow-left"></span>
                        </button>
                        <div class="card-body">

                            @if(assignmentCreated)
                            {
                                <p class="h3 mt-3 mb-3 p-3 text-center">
                                    המשימה נוצרה בהצלחה
                                </p>
                            }
                            else
                            {
                                <div class="text-center">
                                    <h1 class="mb-3">פרטי המשימה</h1>
                                </div>
                                <div class="mt-4">
                                    <EditForm Context="AssignmentCreateContext" OnValidSubmit="@OnAssignmentCreate" Model="this.assignmentCreation">
                                        <DataAnnotationsValidator />
                                        <div class="form-group">
                                            <input type="text" class="form-control mb-3" placeholder="כותרת" @bind="assignmentCreation.Title" minlength="10" maxlength="50" required/>

                                            <textarea class="form-control mb-3" cols="30" placeholder="הוראות המשימה" rows="10" @bind="assignmentCreation.AssignmentText" required/>

                                            <div class="mb-3">
                                                <label for="startSubmissionDate">להגשה עד</label>
                                                <input type="datetime-local" class="form-control" id="startSubmissionDate" @bind="assignmentCreation.EndSubmissionAt" step="1" required/>
                                            </div>

                                            <section>
                                                <PrettyInputFile @ref="inputFile" MaxMultipleFiles="20" />
                                            </section>

                                            <div class="form-group text-center mt-3 mb-3">
                                                <button type="submit" class="btn btn-dark mb-1">
                                                    @if (inAction)
                                                    {
                                                        <span class="spinner-border spinner-border-sm ms-1" role="status" aria-hidden="true"></span>
                                                    }
                                                    <span>צור משימה חדשה</span>
                                                </button>
                                            </div>
                                        </div>
                                    </EditForm>
                                </div>
                                <div class="mt-2">
                                    <DismissibleAlert @ref="alert" class="m-2 shadow-sm"/>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

</RenderPermission>

@code {
    [Parameter] public Guid ClassId { get; set; }

    private bool assignmentCreated;

    private ClassModel? classModel;

    private AssignmentCreationModel assignmentCreation = new();

    private DismissibleAlert? alert;

    private bool inAction;

    private CancellationTokenSource cancelTokenSource = new();

    private PrettyInputFile? inputFile;

    protected override async Task OnInitializedAsync()
    {
        using(var dbContext = await campusContextFactory.CreateDbContextAsync())
        {
            if (authenticationState.DisposedUserEntity?.Id != null)
            {
                var user = await dbContext.Users.FindAsync(authenticationState.DisposedUserEntity.Id);
                if(user != null)
                {
                    classModel = await dbContext.GetLecturerClassAsync(user.Id, ClassId);

                    if(classModel == null)
                    {
                        navigationService.NavigatePrevious();
                    }
                }
            }
        }
    }

    private async Task OnAssignmentCreate()
    {
        if (!inAction)
        {
            try
            {
                if (classModel != null && classModel.Class != null)
                {
                    inAction = true;
                    var assignmentEntity = await assignmentManager.CreateLecturerAssignment(classModel.Class.Id, assignmentCreation, inputFile?.RequestedUploadFiles, cancelTokenSource.Token);
                    assignmentCreated = true;
                }
            }
            catch(AssignmentCreateUpdateException ex)
            {
                alert?.ShowWarning(ex.Message);
            }
            catch
            {
                alert?.ShowWarning("אירעה שגיאה באת עדכון המשימה");
            }
            finally
            {
                inAction = false;
            }
        }
    }

    public void Dispose()
    {
        cancelTokenSource.Cancel();
    }
}
