@page "/"

@inject IAuthenticationStateService authenticationState
@inject IDbContextFactory<CampusContext> campusContextFactory


<h1 class="text-center mb-5">
    @DayStateGreet, @authenticationState.DisposedUserEntity?.FirstName @authenticationState.DisposedUserEntity?.LastName
</h1>


<RenderPermission Permissions="new[] { UserPermissionsEnum.Student, UserPermissionsEnum.Lecturer }">

    <div class="container mb-5">
        <h2 class="mb-4">כיתות/קורסים שלי</h2>

        @if(classes != null)
        {
            if (classes.Count > 0)
            {
                <div class="row row-cols-1 row-cols-md-3 g-4 justify-content-evenly">
                    @foreach (var currClass in classes)
                    {
                        <div class="col-lg-4 mb-3 d-flex align-items-stretch flex-flow-column">
                            <div class="card w-100 h-100 shadow-sm">
                                <div class="card-body">
                                    <p class="card-title h4 mb-2">@currClass.Course?.Name</p>
                                    <div class="card-text">
                                        <p class="h6 text-muted mb-3">כיתה: @currClass.Class?.Name</p>
                                        <p class="">מרצה ראשי: @(currClass.Lecturer != null ? (currClass.Lecturer.FirstName + " " + currClass.Lecturer.LastName) : "לא שובץ")</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <h4 class="text-muted">כרגע ניראה שאין קורסים משויכים</h4>
            }
        }
    </div>

    <div class="container mb-5">
        <h2 class="mb-4">המפגשים הקרובים</h2>

        @if(meetings != null)
        {
            if (meetings.Count > 0)
            {
                <MeetingsCarouselSlider Meetings="meetings" />
            }
            else
            {
                <h4 class="text-muted">אין מפגשים קרובים</h4>
            }
        }
    </div>

</RenderPermission>

@code {
    private string? DayStateGreet;

    private List<ClassModel>? classes;
    private List<MeetingModel>? meetings;

    protected override void OnInitialized()
    {
        var currentHour = DateTime.Now.Hour;
        if(currentHour >= 23 || currentHour < 5)
        {
            DayStateGreet = "לילה טוב";
        }
        else if(currentHour >= 5 && currentHour < 12)
        {
            DayStateGreet = "בוקר טוב";
        }
        else if(currentHour >= 12 && currentHour < 17)
        {
            DayStateGreet = "צהריים טובים";
        }
        else
        {
            DayStateGreet = "ערב טוב";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        using(var dbContext = await campusContextFactory.CreateDbContextAsync())
        {
            if (authenticationState.DisposedUserEntity?.Id != null)
            {
                var user = await dbContext.Users.Include(x => x.LecturingClasses).Include(x => x.Classes).FirstOrDefaultAsync(x => x.Id == authenticationState.DisposedUserEntity.Id);
                if(user != null)
                {
                    if (user.Permissions == UserPermissionsEnum.Lecturer)
                    {
                        classes = await (from lecturerClass in user.LecturingClasses
                                         join course in dbContext.Courses on lecturerClass.CourseId equals course.Id
                                         select new ClassModel { Class = lecturerClass, Course = course, Lecturer = lecturerClass.Lecturer }).ToAsyncEnumerable().ToListAsync();

                        var currentTime = DateTime.Now;
                        meetings = await (from lecturerClass in user.LecturingClasses
                                          join course in dbContext.Courses on lecturerClass.CourseId equals course.Id
                                          join meeting in dbContext.ClassMeetings on user.Id equals meeting.LecturerId
                                          where meeting.StartAt > currentTime || currentTime.Subtract(meeting.StartAt) < TimeSpan.FromHours(2)
                                          orderby meeting.StartAt ascending
                                          select new MeetingModel { Meeting = meeting, Class = lecturerClass, Course = course, Lecturer = meeting.Lecturer}).Take(5).ToAsyncEnumerable().ToListAsync();
                    }
                    else if(user.Permissions == UserPermissionsEnum.Student)
                    {
                        classes = await (from userClass in user.Classes
                                         join classEntity in dbContext.Classes on userClass.ClassId equals classEntity.Id
                                         join course in dbContext.Courses on classEntity.CourseId equals course.Id
                                         select new ClassModel { Class = classEntity, Course = course, Lecturer = classEntity.Lecturer }).ToAsyncEnumerable().ToListAsync();

                        var currentTime = DateTime.Now;
                        meetings = await (from classAndCourse in classes
                                          join meeting in dbContext.ClassMeetings on classAndCourse.Class?.Id equals meeting.ClassId
                                          where meeting.StartAt > currentTime || currentTime.Subtract(meeting.StartAt) < TimeSpan.FromHours(2)
                                          orderby meeting.StartAt ascending
                                          select new MeetingModel { Meeting = meeting, Class = classAndCourse.Class, Course = classAndCourse.Course, Lecturer = meeting.Lecturer}).Take(5).ToAsyncEnumerable().ToListAsync();
                    }
                }
            }
        }
    }
}
