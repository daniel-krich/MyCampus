@page "/"

@inject IAuthenticationStateService authenticationState
@inject IDbContextFactory<CampusContext> campusContextFactory

<h1 class="text-center mb-5">
    @DayStateGreet, @authenticationState.DisposedUserEntity?.FirstName @authenticationState.DisposedUserEntity?.LastName
</h1>

<div class="container mb-5">
    <h2 class="mb-4">הקורסים שלי</h2>

    @if(classes != null)
    {
        if (classes.Count > 0)
        {
            <div class="row row-cols-1 row-cols-md-3 g-4 justify-content-evenly">
                @foreach (var currClass in classes)
                {
                    <div class="col-lg-4 mb-3 d-flex align-items-stretch flex-flow-column">
                        <div class="card w-100 h-100 shadow-sm">
                            <div class="card-body">
                                <p class="card-title h4 mb-2">@currClass.course.Name</p>
                                <div class="card-text">
                                    <p class="h6 text-muted mb-3">כיתה: @currClass.currentClass.Name</p>
                                    <p class="">מרצה ראשי: @(currClass.classLecturer != null ? (currClass.classLecturer.FirstName + " " + currClass.classLecturer.LastName) : "לא שובץ")</p>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <h4 class="text-muted">כרגע ניראה שאין קורסים משויכים</h4>
        }
    }
</div>

<div class="container mb-5">
    <h2 class="mb-4">המפגשים הקרובים</h2>

    @if(meetings != null)
    {
        if (meetings.Count > 0)
        {
            <MeetingsCarouselSlider Meetings="meetings" />
        }
        else
        {
            <h4 class="text-muted">אין מפגשים קרובים</h4>
        }
    }
</div>

@code {
    private string? DayStateGreet;

    private List<(ClassEntity currentClass, CourseEntity course, UserEntity? classLecturer)>? classes;
    private List<(ClassMeetingEntity meeting, ClassEntity currentClass, CourseEntity course, UserEntity meetingLecturer)>? meetings;

    protected override void OnInitialized()
    {
        var currentHour = DateTime.Now.Hour;
        if(currentHour >= 23 || currentHour < 5)
        {
            DayStateGreet = "לילה טוב";
        }
        else if(currentHour >= 5 && currentHour < 12)
        {
            DayStateGreet = "בוקר טוב";
        }
        else if(currentHour >= 12 && currentHour < 17)
        {
            DayStateGreet = "צהריים טובים";
        }
        else
        {
            DayStateGreet = "ערב טוב";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        using(var dbContext = await campusContextFactory.CreateDbContextAsync())
        {
            if (authenticationState.DisposedUserEntity?.Id != null)
            {
                var user = await dbContext.Users.FindAsync(authenticationState.DisposedUserEntity.Id);
                if(user != null)
                {
                    var userClasses = await (from userClass in user.Classes select userClass.Class).ToAsyncEnumerable().ToListAsync();
                    using var secondDbContext = await campusContextFactory.CreateDbContextAsync();
                    classes = await (from currClass in userClasses
                                     from course in secondDbContext.Courses
                                     where course.Id == currClass.CourseId
                                     select (currClass, course, currClass.Lecturer)).ToAsyncEnumerable().ToListAsync();

                    var currentTime = DateTime.Now;
                    meetings = await (from myclass in classes
                                      from meeting in dbContext.ClassMeetings
                                      where myclass.currentClass.Id == meeting.ClassId &&
                                      (meeting.StartAt > currentTime || currentTime.Subtract(meeting.StartAt) < TimeSpan.FromHours(2))
                                      orderby meeting.StartAt ascending
                                      select (meeting, myclass.currentClass, myclass.course, meeting.Lecturer)).Take(5).ToAsyncEnumerable().ToListAsync();
                }
            }
        }
    }
}
