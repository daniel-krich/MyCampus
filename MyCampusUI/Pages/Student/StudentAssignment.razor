@page "/student/assignment/{AssignmentId:guid}"

@inject IAuthenticationStateService authenticationState
@inject CustomNavigationService navigationService
@inject IDbContextFactory<CampusContext> campusContextFactory

<div class="container mb-5">
    @if (assignment != null)
    {
        <h2 class="mb-4">משימה להגשה - @assignment.Title</h2>

        <div class="row p-3">
            <div class="col-12">
                <div class="card shadow-sm position-relative">
                    <h5>
                        @if (assignmentSubmission == null)
                        {
                            <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-secondary">
                                לא הוגש
                            </span>
                        }
                        else if(assignmentSubmission.Evaluation == null)
                        {
                            <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-primary">
                                הוגש
                            </span>
                        }
                        else
                        {
                            <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-success">
                                נבדק
                            </span>
                        }
                    </h5>
                    <button class="btn-sm btn-dark fw-bold shadow-sm position-absolute top-0 start-0 translate-middle" @onclick="@(() => navigationService.NavigatePrevious())">
                        חזור <span class="oi oi-arrow-left"></span>
                    </button>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-lg-6 border-secondary task-border-divide">
                                <div class="card-body">
                                    <h1 class="mb-0 text-center">פרטי המשימה</h1>
                                    <div class="mt-5">
                                        @assignment.AssignmentSource
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-6">
                                <div class="card-body">
                                    <div class="text-center">
                                        <h1 class="mb-3">פרטי הגשה</h1>
                                    </div>
                                    <div class="mt-4">
                                        <EditForm Context="AssignmentSubmitContext" OnSubmit="@OnAssignmentSubmit" Model="this.assignmentSubmit">
                                            <div class="form-group">
                                                <textarea class="form-control" name="" id="" cols="30" rows="10" @bind="assignmentSubmit.SubmissionText"/>
                                                <p class="mt-3">
                                                    הורד קובץ מוגש        
                                                </p>
                                                <div class="form-group text-center mt-5">
                                                    <button type="submit" class="btn btn-dark mb-1" disabled="@(assignmentSubmission?.Evaluation != null || inAction)">
                                                        @if (inAction)
                                                        {
                                                            <span class="spinner-border spinner-border-sm ms-1" role="status" aria-hidden="true"></span>
                                                        }

                                                        @if (assignmentSubmission == null)
                                                        {
                                                            <span>הגשת המשימה</span>
                                                        }
                                                        else if(assignmentSubmission.Evaluation == null)
                                                        {
                                                            <span>עדכון המשימה</span>
                                                        }
                                                        else
                                                        {
                                                            <span>המשימה נבדקה</span>
                                                        }
                                                    </button>
                                                </div>
                                            </div>
                                        </EditForm>
                                    </div>
                                    <div class="mt-2">
                                        <DismissibleAlert Message="@successMessage" Classes="alert-success m-2 shadow-sm"/>
                                        <DismissibleAlert Message="@warningMessage" Classes="alert-warning m-2 shadow-sm"/>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public Guid AssignmentId { get; set; }
    private AssignmentSubmitModel assignmentSubmit = new();
    private ItemRef<string> successMessage = new("");
    private ItemRef<string> warningMessage = new("");
    private bool inAction;
    private ClassAssignmentEntity? assignment;
    private ClassAssignmentSubmissionEntity? assignmentSubmission;

    protected override async Task OnInitializedAsync()
    {
        using(var dbContext = await campusContextFactory.CreateDbContextAsync())
        {
            if (authenticationState.DisposedUserEntity?.Id != null)
            {
                var user = await dbContext.Users.FindAsync(authenticationState.DisposedUserEntity.Id);
                if(user != null)
                {
                    assignment = await (from userClass in user.Classes
                                        from assign in dbContext.ClassAssignments
                                        where assign.Id == AssignmentId &&
                                        assign.ClassId == userClass.ClassId
                                        select assign).ToAsyncEnumerable().FirstOrDefaultAsync();

                    if(assignment != null)
                    {
                        assignmentSubmission = await assignment.AssignmentSubmissions.ToAsyncEnumerable().FirstOrDefaultAsync(x => x.StudentId == user.Id);
                        assignmentSubmit.SubmissionText = assignmentSubmission?.SubmissionText ?? "";
                    }
                    else
                    {
                        navigationService.NavigatePrevious();
                    }
                }
            }
        }
    }

    private async Task OnAssignmentSubmit()
    {
        if (!inAction)
        {
            inAction = true;
            using (var dbContext = await campusContextFactory.CreateDbContextAsync())
            {
                if (authenticationState.DisposedUserEntity?.Id != null)
                {
                    var user = await dbContext.Users.FindAsync(authenticationState.DisposedUserEntity.Id);
                    var assignmentSub = await dbContext.ClassAssignmentSubmissions.FindAsync(assignmentSubmission?.Id);
                    if (user != null && assignment != null && assignmentSub?.Evaluation == null)
                    {
                        if (assignmentSub != null)
                        {
                            assignmentSub.SubmissionText = assignmentSubmit.SubmissionText;
                            assignmentSub.SubmittedAt = DateTime.Now;
                            dbContext.ClassAssignmentSubmissions.Update(assignmentSub);
                            await dbContext.SaveChangesAsync();
                            assignmentSubmission = assignmentSub;
                            warningMessage.Item = "";
                            successMessage.Item = "המשימה עודכנה בהצלחה";
                        }
                        else
                        {
                            try
                            {
                                var newSubmission = new ClassAssignmentSubmissionEntity
                                    {
                                        StudentId = user.Id,
                                        AssignmentId = assignment.Id,
                                        SubmissionFileUrl = "https://none",
                                        SubmissionText = assignmentSubmit.SubmissionText,
                                        SubmittedAt = DateTime.Now
                                    };
                                dbContext.ClassAssignmentSubmissions.Add(newSubmission);
                                await dbContext.SaveChangesAsync();
                                assignmentSubmission = newSubmission;
                                warningMessage.Item = "";
                                successMessage.Item = "המשימה הוגשה בהצלחה";
                            }
                            catch
                            {
                                successMessage.Item = "";
                                warningMessage.Item = "אירעה שגיאה באת הגשת המשימה";
                            }
                        }
                    }
                }
            }
            inAction = false;
        }
    }
}


