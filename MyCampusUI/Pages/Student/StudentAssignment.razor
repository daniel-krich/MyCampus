@page "/student/assignment/{AssignmentId:guid}"

@implements IDisposable

@inject IAuthenticationStateService authenticationState
@inject ICustomNavigationService navigationService
@inject IBundleFilesService bundleService
@inject IJSRuntime jsRuntime
@inject IAssignmentManagerService assignmentManager
@inject IDbContextFactory<CampusContext> campusContextFactory

<RenderPermission Permission="UserPermissionsEnum.Student" RedirectIfInvalid="true">

    <div class="container mb-4">
        @if (assignment != null)
        {
            <h2 class="mb-4">משימה להגשה - @assignment.Title</h2>

            <div class="row p-3">
                <div class="col-12">
                    <div class="card shadow-sm position-relative">
                        <h5>
                            @if (assignmentSubmission == null)
                            {
                                @if (assignment?.EndSubmissionAt > DateTime.Now)
                                {
                                    <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-secondary">
                                        לא הוגש
                                    </span>
                                }
                                else
                                {
                                    <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                                        נסגר
                                    </span>
                                }
                            }
                            else if(assignmentSubmission.LecturerEvaluation == null)
                            {
                                <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-primary">
                                    הוגש
                                </span>
                            }
                            else
                            {
                                <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-success">
                                    נבדק
                                </span>
                            }
                        </h5>
                        <button class="btn-sm btn-dark fw-bold shadow-sm position-absolute top-0 start-0 translate-middle" @onclick="@(() => navigationService.NavigateTo("/student/assignments"))">
                            חזור <span class="oi oi-arrow-left"></span>
                        </button>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-lg-6 border-secondary task-border-divide">
                                    <div class="card-body">
                                        <h1 class="mb-0 text-center">פרטי המשימה</h1>
                                        <div class="space-pre-wrap mt-5">
                                            @assignment?.AssignmentText
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <div class="card-body">
                                        <div class="text-center">
                                            <h1 class="mb-3">פרטי הגשה</h1>
                                        </div>
                                        <div class="mt-4">
                                            <EditForm Context="AssignmentSubmitContext" OnSubmit="@OnAssignmentSubmit" Model="this.assignmentSubmit">
                                                <div class="form-group">
                                                    <textarea class="form-control" cols="30" rows="10" @bind="assignmentSubmit.SubmissionText"/>

                                                    <div class="row mt-1 mb-3">
                                                        <div class="col col-lg-auto mt-2">
                                                            <AsyncLoadingButton type="button" class="btn btn-sm btn-outline-success shadow-sm" ButtonTask="@((e) => DownloadAttachedBundle(assignment?.AssignmentBundleId))" disabled="@(assignment?.AssignmentBundleId == null)">
                                                                <span>הורד קבצים שצורפו למשימה</span>
                                                            </AsyncLoadingButton>
                                                        </div>

                                                        <div class="col col-lg-auto mt-2">
                                                            <AsyncLoadingButton type="button" class="btn btn-sm btn-outline-primary shadow-sm" ButtonTask="@((e) => DownloadAttachedBundle(assignmentSubmission?.AssignmentSubmissionBundleId))" disabled="@(assignmentSubmission?.AssignmentSubmissionBundleId == null)">
                                                                <span>הורד קבצים שהוגשו</span>
                                                            </AsyncLoadingButton>
                                                        </div>

                                                    </div>

                                                    @if (assignmentSubmission?.LecturerEvaluation == null && assignment?.EndSubmissionAt > DateTime.Now)
                                                    {
                                                        <section>
                                                            <PrettyInputFile @ref="inputFile" MaxMultipleFiles="20" />
                                                        </section>
                                                    }

                                                    <div class="form-group text-center mt-3 mb-3">
                                                        <button type="submit" class="btn btn-dark mb-1" disabled="@(assignmentSubmission?.LecturerEvaluation != null || inAction || assignment?.EndSubmissionAt < DateTime.Now)">
                                                            @if (inAction)
                                                            {
                                                                <span class="spinner-border spinner-border-sm ms-1" role="status" aria-hidden="true"></span>
                                                            }

                                                            @if(assignment?.EndSubmissionAt < DateTime.Now)
                                                            {
                                                                <span>המשימה נסגרה</span>
                                                            }
                                                            else if (assignmentSubmission == null)
                                                            {
                                                                <span>הגשת המשימה</span>
                                                            }
                                                            else if(assignmentSubmission.LecturerEvaluation == null)
                                                            {
                                                                <span>עדכון המשימה</span>
                                                            }
                                                            else
                                                            {
                                                                <span>המשימה נבדקה</span>
                                                            }
                                                        </button>
                                                    </div>

                                                    @if (assignmentSubmission?.LecturerNotes != null && assignmentSubmission.LecturerNotes.Length > 0)
                                                    {
                                                        <div class="alert alert-primary" role="alert">
                                                            <p class="h6 fw-bold text-center">הערות מרצה</p>
                                                            <small>
                                                                <p class="space-pre-wrap">@assignmentSubmission.LecturerNotes</p>
                                                            </small>
                                                        </div>
                                                    }
                                                </div>
                                            </EditForm>
                                        </div>
                                        <div class="mt-2">
                                            <DismissibleAlert @ref="alert" class="m-2 shadow-sm"/>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

</RenderPermission>

@code {
    [Parameter] public Guid AssignmentId { get; set; }
    private AssignmentSubmitModel assignmentSubmit = new();
    private DismissibleAlert? alert;
    private bool inAction;
    private ClassAssignmentEntity? assignment;
    private ClassAssignmentSubmissionEntity? assignmentSubmission;

    private CancellationTokenSource cancelTokenSource = new();

    private PrettyInputFile? inputFile;

    protected override async Task OnInitializedAsync()
    {
        using(var dbContext = await campusContextFactory.CreateDbContextAsync())
        {
            if (authenticationState.DisposedUserEntity?.Id != null)
            {
                var user = await dbContext.Users.Include(x => x.Classes).FirstOrDefaultAsync(x => x.Id == authenticationState.DisposedUserEntity.Id);
                if(user != null)
                {
                    var fullAssignment = await (from userClass in user.Classes
                                                join assign in dbContext.ClassAssignments on userClass.ClassId equals assign.ClassId
                                                join assignSubmitFull in dbContext.ClassAssignmentSubmissions
                                                            on new { p1 = assign.Id, p2 = user.Id }
                                                            equals new { p1 = assignSubmitFull.AssignmentId, p2 = assignSubmitFull.StudentId } into assignSubmits
                                                from assignSubmit in assignSubmits.DefaultIfEmpty()
                                                where assign.Id == AssignmentId &&
                                                assign.ClassId == userClass.ClassId
                                                select new { assign, assignSubmit }).ToAsyncEnumerable().FirstOrDefaultAsync();

                    assignment = fullAssignment?.assign;

                    if(assignment != null)
                    {
                        assignmentSubmission = fullAssignment?.assignSubmit;
                        assignmentSubmit.SubmissionText = assignmentSubmission?.SubmissionText ?? "";
                    }
                    else
                    {
                        navigationService.NavigatePreviousOrDefault(true);
                    }
                }
                else
                {
                    navigationService.NavigatePreviousOrDefault(true);
                }
            }
        }
    }

    private async Task DownloadAttachedBundle(Guid? bundleId)
    {
        if (bundleId.HasValue)
        {
            using var stream = await bundleService.OpenBundleStreamAsync(bundleId.Value);
            if (stream != null)
            {
                using DotNetStreamReference streamRef = new DotNetStreamReference(stream);
                string? blobUrl = await jsRuntime.CreateObjectBlobUrl(streamRef, FileTransferEnum.ApplicationZip);
                if (blobUrl != null)
                {
                    await jsRuntime.DownloadBlob($"{assignment?.Title ?? "Unnamed assignment"}.zip", blobUrl);
                    await jsRuntime.ClearBlobUrlObject(blobUrl);
                }
            }
            else
            {
                alert?.ShowWarning("אירעה שגיאה, הקבצים לא נמצאו");
            }
        }
    }

    private async Task OnAssignmentSubmit()
    {
        if (!inAction)
        {
            try
            {
                inAction = true;
                var assignmentSubmitEntity = await assignmentManager.SubmitAssignment(AssignmentId, assignmentSubmit, inputFile?.RequestedUploadFiles, cancelTokenSource.Token);
                assignmentSubmission = assignmentSubmitEntity;
                alert?.ShowSuccess("המשימה הוגשה/עודכנה בהצלחה");
            }
            catch(AssignmentSubmitException ex)
            {
                alert?.ShowWarning(ex.Message);
            }
            catch
            {
                alert?.ShowError("אירעה שגיאה באת הגשת המשימה");
            }
            finally
            {
                inAction = false;
            }
        }
    }

    public void Dispose()
    {
        cancelTokenSource.Cancel();
    }
}


