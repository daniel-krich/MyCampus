@page "/student/quiz/{QuizId:guid}"

@inject IAuthenticationStateService authenticationState
@inject ICustomNavigationService navigationService
@inject IQuizManagerService quizManager
@inject IDbContextFactory<CampusContext> campusContextFactory

<RenderPermission Permission="UserPermissionsEnum.Student" RedirectIfInvalid="true">

    @if(quiz != null)
    {
        @if (finishedQuiz)
        {
            <div class="container">
                <p class="h2 mt-5 text-center">החידון הוגש בהצלחה</p>
                <p class="h4 mt-3 mb-3 text-muted text-center">עניתם על @answeredRight שאלות נכון מתוך @(quiz.Questions.Count), סך הכל <b>@quizScore</b> נקודות</p>
                <div class="d-flex justify-content-center">
                    <a class="btn btn-dark fw-bold shadow-sm" href="@($"/student/quizzes")">
                        חזור לחידונים
                    </a>
                </div>
            </div>
        }
        else
        {
            <div class="container">

                <p class="h3 text-center mb-5">@quiz.Title</p>

                @{
                    var questionId = 0;
                }
                @foreach (var question in quiz.Questions)
                {
                    questionId++;

                    <div class="question-box mb-5 position-relative">
                        <p class="h5 mb-2">@(questionId). @(question.Question)</p>

                        @{
                            var answerId = 0;
                        }
                        @foreach (var answer in question.Answers)
                        {
                            answerId++;
                            <div class="d-flex flex-row align-items-center mb-2">
                                <input class="form-check-input ms-2 me-4" type="radio" @onchange="@(() => CheckAnswer(question.Id, answer.Id))" id="@($"q_{questionId}_a_{answerId}")" name="@($"q_{questionId}")">
                                <label for="@($"q_{questionId}_a_{answerId}")">@answer.Answer</label>
                            </div>
                        }
                    </div>
                }


                <div class="d-flex justify-content-center mb-5">
                    <AsyncLoadingButton class="btn btn-dark" ButtonTask="@((c) => OnSubmitQuiz())">
                        <span>להגשה</span>
                    </AsyncLoadingButton>
                </div>

                <div class="mt-2">
                    <DismissibleAlert @ref="alert" class="m-2 shadow-sm"/>
                </div>
            </div>
        }
    }

</RenderPermission>

@code {
    [Parameter] public Guid QuizId { get; set; }

    private Dictionary<Guid, Guid> questionAnswerPair = new();
    private ClassQuizEntity? quiz;

    private DismissibleAlert? alert;

    private bool finishedQuiz;
    private int answeredRight;
    private float quizScore;

    protected override async Task OnInitializedAsync()
    {
        using(var dbContext = await campusContextFactory.CreateDbContextAsync())
        {
            if (authenticationState.User?.Id != null)
            {
                var user = await dbContext.Users.FirstOrDefaultAsync(x => x.Id == authenticationState.User.Id);
                if(user != null)
                {
                    quiz = await (from userClass in dbContext.UserClasses
                                  join classQuiz in dbContext.ClassQuizzes.Include(x => x.Questions).ThenInclude(x => x.Answers) on userClass.ClassId equals classQuiz.ClassId
                                  where userClass.StudentId == user.Id && classQuiz.Id == QuizId && classQuiz.IsOpen
                                  select classQuiz).FirstOrDefaultAsync();
                    if(quiz != null)
                    {
                        quiz.Questions = quiz.Questions.OrderBy(_ => Random.Shared.Next()).ToList();
                        foreach(var question in quiz.Questions)
                        {
                            question.Answers = question.Answers.OrderBy(_ => Random.Shared.Next()).ToList();
                        }
                    }
                    else
                    {
                        navigationService.NavigatePreviousOrDefault(true);
                    }
                }
                else
                {
                    navigationService.NavigatePreviousOrDefault(true);
                }
            }
        }
    }

    private async Task OnSubmitQuiz()
    {
        if(quiz != null && quiz.Questions.Count == questionAnswerPair.Keys.Count)
        {
            answeredRight = 0;
            foreach(var question in quiz.Questions)
            {
                var rightAnswer = question.Answers.FirstOrDefault(x => x.IsRight);
                questionAnswerPair.TryGetValue(question.Id, out var userAnswerId);
                if(rightAnswer?.Id == userAnswerId)
                {
                    answeredRight++;
                }
            }
            quizScore = (float)Math.Round(((float)answeredRight / (quiz.Questions.Count == 0 ? 1 : quiz.Questions.Count)) * 100.0f, 1);

            try
            {
                await quizManager.SubmitQuiz(quiz.Id, quizScore);
                finishedQuiz = true;
            }
            catch(QuizSubmitException ex)
            {
                alert?.ShowWarning(ex.Message);
            }
            catch
            {
                alert?.ShowError("אירעה שגיאה לא ידועה באת הגשת החידון");
            }

            StateHasChanged();
        }
        else
        {
            alert?.ShowWarning("יש לענות על כל השאלות לפני ההגשה");
        }
    }

    private void CheckAnswer(Guid question, Guid answer)
    {
        questionAnswerPair[question] = answer;
    }
}


