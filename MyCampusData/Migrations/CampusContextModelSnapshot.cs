// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyCampusData.Data;

#nullable disable

namespace MyCampusData.Migrations
{
    [DbContext(typeof(CampusContext))]
    partial class CampusContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MyCampusData.Entities.BundleFileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BundleFiles")
                        .HasColumnType("int");

                    b.Property<long>("BundleSize")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Bundles");
                });

            modelBuilder.Entity("MyCampusData.Entities.ClassAssignmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssignmentBundleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssignmentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndSubmissionAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentBundleId");

                    b.HasIndex("ClassId");

                    b.ToTable("ClassAssignments");
                });

            modelBuilder.Entity("MyCampusData.Entities.ClassAssignmentSubmissionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssignmentSubmissionBundleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LecturerEvaluation")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LecturerNotes")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubmissionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("AssignmentSubmissionBundleId");

                    b.HasIndex("StudentId");

                    b.ToTable("ClassAssignmentSubmissions");
                });

            modelBuilder.Entity("MyCampusData.Entities.ClassEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ClassFinishAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ClassStartAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LecturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("LecturerId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("323a5ad6-7c0b-4e94-b55e-0e56282d9b4f"),
                            ClassFinishAt = new DateTime(2022, 8, 16, 14, 52, 38, 210, DateTimeKind.Unspecified),
                            ClassStartAt = new DateTime(2022, 8, 16, 14, 52, 38, 210, DateTimeKind.Unspecified),
                            CourseId = new Guid("8085339c-07b6-42be-ad10-7df5eb0564ce"),
                            CreatedAt = new DateTime(2022, 8, 16, 14, 52, 38, 210, DateTimeKind.Unspecified),
                            Name = "D151121MR"
                        },
                        new
                        {
                            Id = new Guid("9a6befae-bfe1-4b01-a4fc-2805d4043df7"),
                            ClassFinishAt = new DateTime(2022, 8, 16, 15, 56, 0, 243, DateTimeKind.Unspecified).AddTicks(3333),
                            ClassStartAt = new DateTime(2022, 8, 16, 15, 56, 0, 243, DateTimeKind.Unspecified).AddTicks(3333),
                            CourseId = new Guid("b21d2e8c-a9c9-4b25-a208-de40f2967b6d"),
                            CreatedAt = new DateTime(2022, 8, 16, 15, 56, 0, 243, DateTimeKind.Unspecified).AddTicks(3333),
                            LecturerId = new Guid("432d6f99-d2bf-4267-959f-1a039c950e0f"),
                            Name = "G160822ER"
                        },
                        new
                        {
                            Id = new Guid("7c129914-4625-46d3-b11d-3a6f122ace07"),
                            ClassFinishAt = new DateTime(2022, 8, 16, 14, 52, 19, 930, DateTimeKind.Unspecified),
                            ClassStartAt = new DateTime(2022, 8, 16, 14, 52, 19, 930, DateTimeKind.Unspecified),
                            CourseId = new Guid("8085339c-07b6-42be-ad10-7df5eb0564ce"),
                            CreatedAt = new DateTime(2022, 8, 16, 14, 52, 19, 930, DateTimeKind.Unspecified),
                            LecturerId = new Guid("432d6f99-d2bf-4267-959f-1a039c950e0f"),
                            Name = "D151121ER"
                        });
                });

            modelBuilder.Entity("MyCampusData.Entities.ClassMeetingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LecturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MeetingUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(56)
                        .HasColumnType("nvarchar(56)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("LecturerId");

                    b.ToTable("ClassMeetings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fdc4ec99-271b-457d-a867-040778b1e50a"),
                            ClassId = new Guid("7c129914-4625-46d3-b11d-3a6f122ace07"),
                            CreatedAt = new DateTime(2022, 8, 16, 14, 59, 50, 650, DateTimeKind.Unspecified),
                            LecturerId = new Guid("432d6f99-d2bf-4267-959f-1a039c950e0f"),
                            MeetingUrl = "https://us06web.zoom.us/j/83663882593",
                            StartAt = new DateTime(2022, 9, 1, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Generic meeting"
                        },
                        new
                        {
                            Id = new Guid("4eba53af-e916-4f26-acb5-0938a085c61c"),
                            ClassId = new Guid("7c129914-4625-46d3-b11d-3a6f122ace07"),
                            CreatedAt = new DateTime(2022, 8, 16, 15, 0, 17, 710, DateTimeKind.Unspecified),
                            LecturerId = new Guid("432d6f99-d2bf-4267-959f-1a039c950e0f"),
                            MeetingUrl = "https://us06web.zoom.us/j/83663882593",
                            StartAt = new DateTime(2022, 9, 18, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Generic meeting"
                        },
                        new
                        {
                            Id = new Guid("01d65ce9-2754-470c-9967-16446c37b8e4"),
                            ClassId = new Guid("7c129914-4625-46d3-b11d-3a6f122ace07"),
                            CreatedAt = new DateTime(2022, 8, 16, 15, 0, 2, 260, DateTimeKind.Unspecified),
                            LecturerId = new Guid("432d6f99-d2bf-4267-959f-1a039c950e0f"),
                            MeetingUrl = "https://us06web.zoom.us/j/83663882593",
                            StartAt = new DateTime(2022, 9, 8, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Generic meeting"
                        },
                        new
                        {
                            Id = new Guid("000b4f7a-8adf-44db-8081-1fc99845c261"),
                            ClassId = new Guid("7c129914-4625-46d3-b11d-3a6f122ace07"),
                            CreatedAt = new DateTime(2022, 8, 16, 15, 0, 11, 330, DateTimeKind.Unspecified),
                            LecturerId = new Guid("432d6f99-d2bf-4267-959f-1a039c950e0f"),
                            MeetingUrl = "https://us06web.zoom.us/j/83663882593",
                            StartAt = new DateTime(2022, 9, 14, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Generic meeting"
                        },
                        new
                        {
                            Id = new Guid("75c147aa-1076-4b76-82b8-2c62bbe52695"),
                            ClassId = new Guid("7c129914-4625-46d3-b11d-3a6f122ace07"),
                            CreatedAt = new DateTime(2022, 8, 16, 15, 0, 29, 730, DateTimeKind.Unspecified),
                            LecturerId = new Guid("432d6f99-d2bf-4267-959f-1a039c950e0f"),
                            MeetingUrl = "https://us06web.zoom.us/j/83663882593",
                            StartAt = new DateTime(2022, 9, 28, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Generic meeting"
                        },
                        new
                        {
                            Id = new Guid("78ae0eb1-cd66-4487-a49d-38539dfdef4b"),
                            ClassId = new Guid("7c129914-4625-46d3-b11d-3a6f122ace07"),
                            CreatedAt = new DateTime(2022, 8, 16, 14, 58, 13, 133, DateTimeKind.Unspecified).AddTicks(3333),
                            LecturerId = new Guid("432d6f99-d2bf-4267-959f-1a039c950e0f"),
                            MeetingUrl = "https://us06web.zoom.us/j/83663882593",
                            StartAt = new DateTime(2022, 8, 16, 8, 52, 38, 210, DateTimeKind.Unspecified),
                            Title = "Learn .NET basics"
                        },
                        new
                        {
                            Id = new Guid("af1c538f-5c57-4c8b-9a00-39be3a1c7d69"),
                            ClassId = new Guid("7c129914-4625-46d3-b11d-3a6f122ace07"),
                            CreatedAt = new DateTime(2022, 8, 16, 15, 0, 33, 146, DateTimeKind.Unspecified).AddTicks(6667),
                            LecturerId = new Guid("432d6f99-d2bf-4267-959f-1a039c950e0f"),
                            MeetingUrl = "https://us06web.zoom.us/j/83663882593",
                            StartAt = new DateTime(2022, 9, 30, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Generic meeting"
                        },
                        new
                        {
                            Id = new Guid("88c52c24-57dd-4505-b3e7-4f1e57be5afd"),
                            ClassId = new Guid("7c129914-4625-46d3-b11d-3a6f122ace07"),
                            CreatedAt = new DateTime(2022, 8, 16, 15, 0, 18, 853, DateTimeKind.Unspecified).AddTicks(3333),
                            LecturerId = new Guid("432d6f99-d2bf-4267-959f-1a039c950e0f"),
                            MeetingUrl = "https://us06web.zoom.us/j/83663882593",
                            StartAt = new DateTime(2022, 9, 19, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Generic meeting"
                        },
                        new
                        {
                            Id = new Guid("60e35fe8-48c4-459d-ace4-5cc242ac6cb1"),
                            ClassId = new Guid("7c129914-4625-46d3-b11d-3a6f122ace07"),
                            CreatedAt = new DateTime(2022, 8, 16, 14, 59, 57, 346, DateTimeKind.Unspecified).AddTicks(6667),
                            LecturerId = new Guid("432d6f99-d2bf-4267-959f-1a039c950e0f"),
                            MeetingUrl = "https://us06web.zoom.us/j/83663882593",
                            StartAt = new DateTime(2022, 9, 5, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Generic meeting"
                        },
                        new
                        {
                            Id = new Guid("adcf54e6-f884-4765-8829-6835eea6ace2"),
                            ClassId = new Guid("7c129914-4625-46d3-b11d-3a6f122ace07"),
                            CreatedAt = new DateTime(2022, 8, 16, 15, 0, 0, 940, DateTimeKind.Unspecified),
                            LecturerId = new Guid("432d6f99-d2bf-4267-959f-1a039c950e0f"),
                            MeetingUrl = "https://us06web.zoom.us/j/83663882593",
                            StartAt = new DateTime(2022, 9, 7, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Generic meeting"
                        },
                        new
                        {
                            Id = new Guid("6f878d02-9365-433a-8516-6d7b34d2541e"),
                            ClassId = new Guid("7c129914-4625-46d3-b11d-3a6f122ace07"),
                            CreatedAt = new DateTime(2022, 8, 16, 15, 0, 27, 690, DateTimeKind.Unspecified),
                            LecturerId = new Guid("432d6f99-d2bf-4267-959f-1a039c950e0f"),
                            MeetingUrl = "https://us06web.zoom.us/j/83663882593",
                            StartAt = new DateTime(2022, 9, 26, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Generic meeting"
                        },
                        new
                        {
                            Id = new Guid("5e2c5167-9c37-475d-b8c0-7a426e10a02e"),
                            ClassId = new Guid("7c129914-4625-46d3-b11d-3a6f122ace07"),
                            CreatedAt = new DateTime(2022, 8, 16, 15, 0, 26, 140, DateTimeKind.Unspecified),
                            LecturerId = new Guid("432d6f99-d2bf-4267-959f-1a039c950e0f"),
                            MeetingUrl = "https://us06web.zoom.us/j/83663882593",
                            StartAt = new DateTime(2022, 9, 25, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Generic meeting"
                        },
                        new
                        {
                            Id = new Guid("6471d929-92ff-4555-ad3f-7d3d57e9cb98"),
                            ClassId = new Guid("7c129914-4625-46d3-b11d-3a6f122ace07"),
                            CreatedAt = new DateTime(2022, 8, 16, 15, 0, 21, 233, DateTimeKind.Unspecified).AddTicks(3333),
                            LecturerId = new Guid("432d6f99-d2bf-4267-959f-1a039c950e0f"),
                            MeetingUrl = "https://us06web.zoom.us/j/83663882593",
                            StartAt = new DateTime(2022, 9, 21, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Generic meeting"
                        },
                        new
                        {
                            Id = new Guid("f296539b-772b-4aa6-8346-7e36fb6e70db"),
                            ClassId = new Guid("7c129914-4625-46d3-b11d-3a6f122ace07"),
                            CreatedAt = new DateTime(2022, 8, 16, 15, 0, 7, 493, DateTimeKind.Unspecified).AddTicks(3333),
                            LecturerId = new Guid("432d6f99-d2bf-4267-959f-1a039c950e0f"),
                            MeetingUrl = "https://us06web.zoom.us/j/83663882593",
                            StartAt = new DateTime(2022, 9, 11, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Generic meeting"
                        },
                        new
                        {
                            Id = new Guid("aca3e42b-2958-4a08-8bae-81a58efe8abb"),
                            ClassId = new Guid("7c129914-4625-46d3-b11d-3a6f122ace07"),
                            CreatedAt = new DateTime(2022, 8, 16, 15, 0, 30, 736, DateTimeKind.Unspecified).AddTicks(6667),
                            LecturerId = new Guid("432d6f99-d2bf-4267-959f-1a039c950e0f"),
                            MeetingUrl = "https://us06web.zoom.us/j/83663882593",
                            StartAt = new DateTime(2022, 9, 29, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Generic meeting"
                        },
                        new
                        {
                            Id = new Guid("da346543-0244-4b83-b756-9385cd9b5e47"),
                            ClassId = new Guid("7c129914-4625-46d3-b11d-3a6f122ace07"),
                            CreatedAt = new DateTime(2022, 8, 16, 15, 0, 3, 496, DateTimeKind.Unspecified).AddTicks(6667),
                            LecturerId = new Guid("432d6f99-d2bf-4267-959f-1a039c950e0f"),
                            MeetingUrl = "https://us06web.zoom.us/j/83663882593",
                            StartAt = new DateTime(2022, 9, 9, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Generic meeting"
                        },
                        new
                        {
                            Id = new Guid("4eb0f4c8-3bb6-4213-8cbf-9761a1c064fa"),
                            ClassId = new Guid("7c129914-4625-46d3-b11d-3a6f122ace07"),
                            CreatedAt = new DateTime(2022, 8, 16, 14, 59, 54, 896, DateTimeKind.Unspecified).AddTicks(6667),
                            LecturerId = new Guid("432d6f99-d2bf-4267-959f-1a039c950e0f"),
                            MeetingUrl = "https://us06web.zoom.us/j/83663882593",
                            StartAt = new DateTime(2022, 9, 3, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Generic meeting"
                        },
                        new
                        {
                            Id = new Guid("cc3fc18c-c029-4811-aafd-990c8cb3e95b"),
                            ClassId = new Guid("7c129914-4625-46d3-b11d-3a6f122ace07"),
                            CreatedAt = new DateTime(2022, 8, 16, 15, 0, 13, 933, DateTimeKind.Unspecified).AddTicks(3333),
                            LecturerId = new Guid("432d6f99-d2bf-4267-959f-1a039c950e0f"),
                            MeetingUrl = "https://us06web.zoom.us/j/83663882593",
                            StartAt = new DateTime(2022, 9, 16, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Generic meeting"
                        },
                        new
                        {
                            Id = new Guid("c322a345-3ab5-47ea-b34a-9b0ebdfe99dc"),
                            ClassId = new Guid("7c129914-4625-46d3-b11d-3a6f122ace07"),
                            CreatedAt = new DateTime(2022, 8, 16, 15, 0, 10, 190, DateTimeKind.Unspecified),
                            LecturerId = new Guid("432d6f99-d2bf-4267-959f-1a039c950e0f"),
                            MeetingUrl = "https://us06web.zoom.us/j/83663882593",
                            StartAt = new DateTime(2022, 9, 13, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Generic meeting"
                        },
                        new
                        {
                            Id = new Guid("21d85b05-409e-4da2-a47f-a4d2407a55f5"),
                            ClassId = new Guid("7c129914-4625-46d3-b11d-3a6f122ace07"),
                            CreatedAt = new DateTime(2022, 8, 16, 15, 0, 24, 836, DateTimeKind.Unspecified).AddTicks(6667),
                            LecturerId = new Guid("432d6f99-d2bf-4267-959f-1a039c950e0f"),
                            MeetingUrl = "https://us06web.zoom.us/j/83663882593",
                            StartAt = new DateTime(2022, 9, 24, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Generic meeting"
                        },
                        new
                        {
                            Id = new Guid("370704d4-cfae-421b-8d46-a75af528a52a"),
                            ClassId = new Guid("7c129914-4625-46d3-b11d-3a6f122ace07"),
                            CreatedAt = new DateTime(2022, 8, 16, 15, 0, 28, 686, DateTimeKind.Unspecified).AddTicks(6667),
                            LecturerId = new Guid("432d6f99-d2bf-4267-959f-1a039c950e0f"),
                            MeetingUrl = "https://us06web.zoom.us/j/83663882593",
                            StartAt = new DateTime(2022, 9, 27, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Generic meeting"
                        },
                        new
                        {
                            Id = new Guid("f9607d6b-c557-4801-81a9-b532bc9fa3d0"),
                            ClassId = new Guid("7c129914-4625-46d3-b11d-3a6f122ace07"),
                            CreatedAt = new DateTime(2022, 8, 16, 14, 59, 13, 36, DateTimeKind.Unspecified).AddTicks(6667),
                            LecturerId = new Guid("432d6f99-d2bf-4267-959f-1a039c950e0f"),
                            MeetingUrl = "https://us06web.zoom.us/j/83663882593",
                            StartAt = new DateTime(2022, 8, 25, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Learn LINQ"
                        },
                        new
                        {
                            Id = new Guid("44772e5b-1cd0-4383-a577-b6fa874e6ab6"),
                            ClassId = new Guid("7c129914-4625-46d3-b11d-3a6f122ace07"),
                            CreatedAt = new DateTime(2022, 8, 16, 14, 58, 39, 780, DateTimeKind.Unspecified),
                            LecturerId = new Guid("432d6f99-d2bf-4267-959f-1a039c950e0f"),
                            MeetingUrl = "https://us06web.zoom.us/j/83663882593",
                            StartAt = new DateTime(2022, 8, 17, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Learn classes and OOP"
                        },
                        new
                        {
                            Id = new Guid("97dc3d25-d3d7-4d3b-8219-bdf23db0e5c7"),
                            ClassId = new Guid("7c129914-4625-46d3-b11d-3a6f122ace07"),
                            CreatedAt = new DateTime(2022, 8, 16, 15, 0, 8, 663, DateTimeKind.Unspecified).AddTicks(3333),
                            LecturerId = new Guid("432d6f99-d2bf-4267-959f-1a039c950e0f"),
                            MeetingUrl = "https://us06web.zoom.us/j/83663882593",
                            StartAt = new DateTime(2022, 9, 12, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Generic meeting"
                        },
                        new
                        {
                            Id = new Guid("12d7d085-0271-48c1-b871-bf6e6afc3da0"),
                            ClassId = new Guid("7c129914-4625-46d3-b11d-3a6f122ace07"),
                            CreatedAt = new DateTime(2022, 8, 16, 15, 0, 6, 463, DateTimeKind.Unspecified).AddTicks(3333),
                            LecturerId = new Guid("432d6f99-d2bf-4267-959f-1a039c950e0f"),
                            MeetingUrl = "https://us06web.zoom.us/j/83663882593",
                            StartAt = new DateTime(2022, 9, 10, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Generic meeting"
                        },
                        new
                        {
                            Id = new Guid("e99cd14b-af7f-42a2-b619-c3306f9e6e51"),
                            ClassId = new Guid("7c129914-4625-46d3-b11d-3a6f122ace07"),
                            CreatedAt = new DateTime(2022, 8, 16, 14, 59, 53, 566, DateTimeKind.Unspecified).AddTicks(6667),
                            LecturerId = new Guid("432d6f99-d2bf-4267-959f-1a039c950e0f"),
                            MeetingUrl = "https://us06web.zoom.us/j/83663882593",
                            StartAt = new DateTime(2022, 9, 2, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Generic meeting"
                        },
                        new
                        {
                            Id = new Guid("52178fa5-abcd-4e7f-bcb2-c494b7f2ba98"),
                            ClassId = new Guid("7c129914-4625-46d3-b11d-3a6f122ace07"),
                            CreatedAt = new DateTime(2022, 8, 16, 15, 0, 20, 233, DateTimeKind.Unspecified).AddTicks(3333),
                            LecturerId = new Guid("432d6f99-d2bf-4267-959f-1a039c950e0f"),
                            MeetingUrl = "https://us06web.zoom.us/j/83663882593",
                            StartAt = new DateTime(2022, 9, 20, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Generic meeting"
                        },
                        new
                        {
                            Id = new Guid("d4b7f3e6-3671-4ebe-8d13-d7f1d065f76b"),
                            ClassId = new Guid("7c129914-4625-46d3-b11d-3a6f122ace07"),
                            CreatedAt = new DateTime(2022, 8, 16, 14, 59, 56, 40, DateTimeKind.Unspecified),
                            LecturerId = new Guid("432d6f99-d2bf-4267-959f-1a039c950e0f"),
                            MeetingUrl = "https://us06web.zoom.us/j/83663882593",
                            StartAt = new DateTime(2022, 9, 4, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Generic meeting"
                        },
                        new
                        {
                            Id = new Guid("6b2385d4-2119-4b86-ba4b-ddfa0e8a3e45"),
                            ClassId = new Guid("7c129914-4625-46d3-b11d-3a6f122ace07"),
                            CreatedAt = new DateTime(2022, 8, 16, 15, 0, 12, 563, DateTimeKind.Unspecified).AddTicks(3333),
                            LecturerId = new Guid("432d6f99-d2bf-4267-959f-1a039c950e0f"),
                            MeetingUrl = "https://us06web.zoom.us/j/83663882593",
                            StartAt = new DateTime(2022, 9, 15, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Generic meeting"
                        },
                        new
                        {
                            Id = new Guid("4cc825da-6108-4707-85a4-e7574310e5f6"),
                            ClassId = new Guid("7c129914-4625-46d3-b11d-3a6f122ace07"),
                            CreatedAt = new DateTime(2022, 8, 16, 15, 0, 15, 196, DateTimeKind.Unspecified).AddTicks(6667),
                            LecturerId = new Guid("432d6f99-d2bf-4267-959f-1a039c950e0f"),
                            MeetingUrl = "https://us06web.zoom.us/j/83663882593",
                            StartAt = new DateTime(2022, 9, 17, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Generic meeting"
                        },
                        new
                        {
                            Id = new Guid("397aadb6-25d6-4948-97e5-e822994ab562"),
                            ClassId = new Guid("7c129914-4625-46d3-b11d-3a6f122ace07"),
                            CreatedAt = new DateTime(2022, 8, 16, 15, 0, 22, 186, DateTimeKind.Unspecified).AddTicks(6667),
                            LecturerId = new Guid("432d6f99-d2bf-4267-959f-1a039c950e0f"),
                            MeetingUrl = "https://us06web.zoom.us/j/83663882593",
                            StartAt = new DateTime(2022, 9, 22, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Generic meeting"
                        },
                        new
                        {
                            Id = new Guid("eccd87e1-cc0b-41a5-9fdd-e855ae1cca91"),
                            ClassId = new Guid("7c129914-4625-46d3-b11d-3a6f122ace07"),
                            CreatedAt = new DateTime(2022, 8, 16, 14, 59, 59, 350, DateTimeKind.Unspecified),
                            LecturerId = new Guid("432d6f99-d2bf-4267-959f-1a039c950e0f"),
                            MeetingUrl = "https://us06web.zoom.us/j/83663882593",
                            StartAt = new DateTime(2022, 9, 6, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Generic meeting"
                        },
                        new
                        {
                            Id = new Guid("9de9a4ae-eb7e-478f-9ef0-f119da36ba23"),
                            ClassId = new Guid("7c129914-4625-46d3-b11d-3a6f122ace07"),
                            CreatedAt = new DateTime(2022, 8, 16, 15, 0, 23, 726, DateTimeKind.Unspecified).AddTicks(6667),
                            LecturerId = new Guid("432d6f99-d2bf-4267-959f-1a039c950e0f"),
                            MeetingUrl = "https://us06web.zoom.us/j/83663882593",
                            StartAt = new DateTime(2022, 9, 23, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Generic meeting"
                        });
                });

            modelBuilder.Entity("MyCampusData.Entities.ClassQuizAnswerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRight")
                        .HasColumnType("bit");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("ClassQuizAnswers");
                });

            modelBuilder.Entity("MyCampusData.Entities.ClassQuizEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("ClassQuizzes");
                });

            modelBuilder.Entity("MyCampusData.Entities.ClassQuizQuestionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("ClassQuizQuestions");
                });

            modelBuilder.Entity("MyCampusData.Entities.ClassQuizSubmissionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("StudentId");

                    b.ToTable("ClassQuizSubmissions");
                });

            modelBuilder.Entity("MyCampusData.Entities.CourseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8085339c-07b6-42be-ad10-7df5eb0564ce"),
                            CreatedAt = new DateTime(2022, 8, 14, 20, 31, 28, 453, DateTimeKind.Unspecified).AddTicks(3333),
                            Description = "Full Stack Development עם התמחות ב - Microsoft .NET & ReactJS",
                            Name = "קורס פיתוח תוכנה 6 NET."
                        },
                        new
                        {
                            Id = new Guid("b21d2e8c-a9c9-4b25-a208-de40f2967b6d"),
                            CreatedAt = new DateTime(2022, 8, 14, 20, 27, 32, 723, DateTimeKind.Unspecified).AddTicks(3333),
                            Description = "פיתוח משחקים ב-Unity וכל מה שמסביב",
                            Name = "קורס פיתוח משחקים"
                        });
                });

            modelBuilder.Entity("MyCampusData.Entities.SessionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpireAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("MyCampusData.Entities.UserClassEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Evaluation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("UserClasses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4b500d50-f6d5-49b9-8cb8-b9dc0646ae7f"),
                            ClassId = new Guid("9a6befae-bfe1-4b01-a4fc-2805d4043df7"),
                            CreatedAt = new DateTime(2022, 8, 16, 15, 57, 2, 686, DateTimeKind.Unspecified).AddTicks(6667),
                            StudentId = new Guid("1fb83307-3f4d-4cf7-8df0-d2dc4f8d3860")
                        },
                        new
                        {
                            Id = new Guid("870f4bc7-7b75-44ae-9e9d-e0337693eb0e"),
                            ClassId = new Guid("7c129914-4625-46d3-b11d-3a6f122ace07"),
                            CreatedAt = new DateTime(2022, 8, 16, 14, 54, 46, 870, DateTimeKind.Unspecified),
                            StudentId = new Guid("1fb83307-3f4d-4cf7-8df0-d2dc4f8d3860")
                        });
                });

            modelBuilder.Entity("MyCampusData.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Permissions")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("432d6f99-d2bf-4267-959f-1a039c950e0f"),
                            City = "תל-אביב",
                            Country = "israel",
                            CreatedAt = new DateTime(2022, 8, 13, 23, 22, 59, 582, DateTimeKind.Unspecified).AddTicks(6978),
                            Email = "alon@gmail.com",
                            FirstName = "אלון",
                            Gender = 1,
                            LastName = "לוי",
                            PasswordHash = new byte[] { 53, 165, 248, 134, 254, 102, 70, 106, 136, 120, 179, 70, 57, 130, 250, 22, 79, 243, 112, 193, 182, 50, 253, 168, 3, 224, 56, 179, 84, 168, 206, 7, 88, 73, 107, 20, 77, 11, 140, 131, 73, 69, 162, 128, 178, 232, 178, 231, 126, 20, 162, 176, 20, 79, 101, 70, 145, 138, 215, 65, 92, 80, 41, 26 },
                            PasswordSalt = new byte[] { 245, 72, 182, 241, 43, 53, 117, 92, 244, 248, 85, 44, 235, 101, 104, 69, 107, 136, 115, 23, 33, 211, 108, 34, 185, 119, 152, 120, 54, 198, 114, 159, 39, 16, 43, 132, 18, 179, 141, 126, 1, 4, 220, 120, 53, 213, 91, 32, 191, 245, 85, 134, 137, 207, 34, 115, 169, 38, 147, 129, 192, 178, 133, 110, 188, 23, 30, 97, 168, 246, 46, 206, 237, 164, 139, 122, 145, 49, 27, 99, 46, 80, 43, 202, 8, 35, 181, 197, 250, 99, 111, 88, 224, 80, 194, 193, 53, 223, 251, 169, 244, 202, 204, 188, 46, 165, 73, 113, 235, 156, 178, 174, 63, 188, 79, 173, 248, 16, 223, 168, 133, 51, 254, 112, 183, 200, 147, 98 },
                            Permissions = 2,
                            PhoneNumber = "0542222222",
                            Username = "demo2"
                        },
                        new
                        {
                            Id = new Guid("1fb83307-3f4d-4cf7-8df0-d2dc4f8d3860"),
                            City = "תל-אביב",
                            Country = "ישראל",
                            CreatedAt = new DateTime(2022, 8, 14, 19, 23, 47, 890, DateTimeKind.Unspecified).AddTicks(2802),
                            Email = "dani@gmail.com",
                            FirstName = "דניאל",
                            Gender = 1,
                            LastName = "קריצ'בסקי",
                            PasswordHash = new byte[] { 178, 227, 83, 132, 198, 100, 73, 199, 31, 2, 176, 156, 128, 199, 214, 107, 73, 136, 246, 173, 184, 131, 201, 185, 20, 44, 188, 182, 43, 187, 163, 26, 103, 85, 15, 99, 126, 56, 148, 246, 25, 196, 240, 66, 216, 50, 73, 207, 117, 152, 251, 225, 220, 236, 230, 140, 53, 7, 205, 111, 63, 37, 80, 80 },
                            PasswordSalt = new byte[] { 151, 66, 238, 37, 57, 135, 60, 114, 239, 254, 85, 236, 198, 147, 3, 177, 162, 35, 224, 157, 247, 234, 133, 13, 64, 149, 54, 85, 210, 251, 61, 255, 8, 154, 188, 121, 63, 175, 230, 198, 204, 28, 182, 181, 17, 33, 3, 136, 47, 191, 84, 74, 88, 113, 0, 240, 241, 228, 226, 145, 179, 86, 60, 129, 125, 222, 211, 241, 107, 247, 98, 88, 35, 193, 197, 67, 217, 129, 76, 30, 198, 118, 125, 248, 10, 190, 6, 43, 157, 60, 216, 34, 109, 102, 76, 151, 178, 140, 2, 175, 160, 144, 187, 40, 236, 86, 130, 81, 58, 124, 51, 127, 6, 51, 242, 168, 68, 159, 117, 146, 134, 199, 24, 101, 205, 51, 173, 112 },
                            Permissions = 1,
                            PhoneNumber = "0542222221",
                            Username = "demo1"
                        },
                        new
                        {
                            Id = new Guid("57b8ecbf-2475-4db1-9d36-ecc338d88445"),
                            City = "חיפה",
                            Country = "ישראל",
                            CreatedAt = new DateTime(2022, 8, 19, 13, 0, 11, 768, DateTimeKind.Unspecified).AddTicks(2118),
                            Email = "admin@localhost.com",
                            FirstName = "בטי",
                            Gender = 2,
                            LastName = "קון",
                            PasswordHash = new byte[] { 196, 5, 202, 245, 224, 199, 87, 73, 16, 249, 133, 95, 190, 56, 85, 11, 186, 165, 184, 200, 125, 236, 77, 21, 214, 5, 168, 49, 4, 237, 177, 201, 158, 153, 190, 85, 232, 10, 5, 14, 20, 8, 76, 172, 232, 36, 213, 22, 67, 4, 131, 151, 236, 126, 143, 56, 227, 144, 189, 127, 157, 154, 33, 105 },
                            PasswordSalt = new byte[] { 120, 229, 176, 131, 121, 88, 210, 38, 155, 9, 35, 107, 139, 50, 206, 122, 47, 121, 59, 178, 199, 170, 89, 8, 165, 187, 15, 146, 35, 66, 137, 206, 142, 63, 217, 200, 121, 64, 122, 62, 121, 231, 101, 58, 53, 33, 48, 144, 112, 151, 178, 40, 5, 167, 195, 89, 129, 117, 159, 120, 147, 141, 43, 68, 192, 178, 242, 176, 165, 246, 96, 180, 110, 77, 254, 45, 230, 186, 231, 207, 177, 93, 11, 87, 178, 170, 139, 158, 7, 125, 197, 57, 91, 238, 107, 33, 124, 143, 123, 114, 188, 32, 47, 141, 239, 108, 163, 108, 163, 54, 4, 228, 237, 65, 133, 239, 8, 24, 121, 63, 70, 4, 198, 191, 17, 247, 2, 186 },
                            Permissions = 3,
                            PhoneNumber = "1111111111",
                            Username = "demo3"
                        });
                });

            modelBuilder.Entity("MyCampusData.Entities.ClassAssignmentEntity", b =>
                {
                    b.HasOne("MyCampusData.Entities.BundleFileEntity", "AssignmentBundle")
                        .WithMany()
                        .HasForeignKey("AssignmentBundleId");

                    b.HasOne("MyCampusData.Entities.ClassEntity", "Class")
                        .WithMany("Assignments")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignmentBundle");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("MyCampusData.Entities.ClassAssignmentSubmissionEntity", b =>
                {
                    b.HasOne("MyCampusData.Entities.ClassAssignmentEntity", "Assignment")
                        .WithMany("AssignmentSubmissions")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyCampusData.Entities.BundleFileEntity", "AssignmentSubmissionBundle")
                        .WithMany()
                        .HasForeignKey("AssignmentSubmissionBundleId");

                    b.HasOne("MyCampusData.Entities.UserEntity", "Student")
                        .WithMany("AssignmentSubmissions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("AssignmentSubmissionBundle");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("MyCampusData.Entities.ClassEntity", b =>
                {
                    b.HasOne("MyCampusData.Entities.CourseEntity", "Course")
                        .WithMany("Classes")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyCampusData.Entities.UserEntity", "Lecturer")
                        .WithMany("LecturingClasses")
                        .HasForeignKey("LecturerId");

                    b.Navigation("Course");

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("MyCampusData.Entities.ClassMeetingEntity", b =>
                {
                    b.HasOne("MyCampusData.Entities.ClassEntity", "Class")
                        .WithMany("Meetings")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyCampusData.Entities.UserEntity", "Lecturer")
                        .WithMany()
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("MyCampusData.Entities.ClassQuizAnswerEntity", b =>
                {
                    b.HasOne("MyCampusData.Entities.ClassQuizQuestionEntity", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("MyCampusData.Entities.ClassQuizEntity", b =>
                {
                    b.HasOne("MyCampusData.Entities.ClassEntity", "Class")
                        .WithMany("Quizzes")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("MyCampusData.Entities.ClassQuizQuestionEntity", b =>
                {
                    b.HasOne("MyCampusData.Entities.ClassQuizEntity", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("MyCampusData.Entities.ClassQuizSubmissionEntity", b =>
                {
                    b.HasOne("MyCampusData.Entities.ClassQuizEntity", "Quiz")
                        .WithMany("Submissions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyCampusData.Entities.UserEntity", "Student")
                        .WithMany("ExamSubmissions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("MyCampusData.Entities.SessionEntity", b =>
                {
                    b.HasOne("MyCampusData.Entities.UserEntity", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyCampusData.Entities.UserClassEntity", b =>
                {
                    b.HasOne("MyCampusData.Entities.ClassEntity", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyCampusData.Entities.UserEntity", "Student")
                        .WithMany("Classes")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("MyCampusData.Entities.ClassAssignmentEntity", b =>
                {
                    b.Navigation("AssignmentSubmissions");
                });

            modelBuilder.Entity("MyCampusData.Entities.ClassEntity", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Meetings");

                    b.Navigation("Quizzes");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("MyCampusData.Entities.ClassQuizEntity", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("MyCampusData.Entities.ClassQuizQuestionEntity", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("MyCampusData.Entities.CourseEntity", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("MyCampusData.Entities.UserEntity", b =>
                {
                    b.Navigation("AssignmentSubmissions");

                    b.Navigation("Classes");

                    b.Navigation("ExamSubmissions");

                    b.Navigation("LecturingClasses");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
